
//
// Notes: This is kind of a weird approach to loading a library. Why do it?
// 
// Short story: I don't want to break compilers or minifiers with the obfuscated internals of this library.
// So, I base-64 encode it, and lazy-load the internals of the class at runtime.
// 
//
class PasskeyManager{

  manager;

  async load() {
    // Decode the base64 string
    const decodedString = atob(
     "// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
//
// Class with methods to make working with subtle crypto
// easier and more obvious
//

class EZCrypto {
  
  
  constructor() {

    this._crypto = undefined;

    if(typeof window == "undefined" && typeof self == "undefined"){
      this._nodeEnvLoad();
    } else {
      try{
        this._crypto = window?.crypto;
        this._crypto.CryptoKey = window?.CryptoKey;
      } catch(e){
        this._crypto = self?.crypto;
        this._crypto.CryptoKey = self?.CryptoKey;
      }
    } 
  }

  // //////////////////////////////////////////////////////////////////////////
  // //////////////////////////////////////////////////////////////////////////
  _nodeEnvLoad = async () => {
    this._crypto =  await Object.getPrototypeOf(async function(){}).constructor(
`
      return await import( "crypto" ).then((m) => {return m.default.webcrypto});
`
    )();  
  }

  // //////////////////////////////////////////////////////////////////////////
  // //////////////////////////////////////////////////////////////////////////
  _sleep = async (duration) => {
    await new Promise((s,j) => {setTimeout(() => {return s(true)},duration);});
  }

  // //////////////////////////////////////////////////////////////////////////
  // //////////////////////////////////////////////////////////////////////////
  //
  // Function:     base64ToArray
  // What is this: Take a base64 string. Convert it to a Uint8Array...
  //
  // Arguments:    strng: - base64 encoded string
  //
  // Returns:      Uint8Array
  // Notes:
  //
  // \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
  // \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

  base64ToArray(strng) {
    return Uint8Array.from(atob(strng), (c) => c.charCodeAt(0));
  }

  // //////////////////////////////////////////////////////////////////////////
  // //////////////////////////////////////////////////////////////////////////
  //
  // Function:     arrayToBase64
  // What is this: take a Uint8Array, make it a valid base64 string
  //
  // Arguments:    ary: - Uint8Array
  //
  // Returns:      Base64 String
  // Notes:
  //
  // \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
  // \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

  arrayToBase64(utf8Bytes) {
    // Split the bytes into smaller chunks to avoid call stack issues
    const chunkSize = 8192;
    const chunks = [];

    for (let i = 0; i < utf8Bytes.length; i += chunkSize) {
      const chunk = utf8Bytes.subarray(i, i + chunkSize);
      chunks.push(String.fromCharCode.apply(null, chunk));
    }

    // Convert the bytes to a base64 string
    const base64 = btoa(chunks.join(''));

    return base64;
  }

  // //////////////////////////////////////////////////////////////////////////
  // //////////////////////////////////////////////////////////////////////////
  //
  // Function:     hmac (static) (async)
  // What is this: Create a cryptographic signature for a piece of data given a *SHARED* secret.
  //               Similar to ECDSA - Except both parties have to have the secret-key in advance
  //               to make it work.
  //
  // Arguments:    secret - this is the shared secret
  //               data   - this is the string you're encrypting
  //
  // Returns:      hex encoded 32 character string or something...(todo: check length - better def)
  // Notes:        https://stackoverflow.com/questions/47329132/how-to-get-hmac-with-crypto-web-api_47332317
  //
  // \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
  // \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

  HMAC = async (secret, data) => {
    await this._sleep(0);

    // To do work, we need to convert text to Uint8Arrays
    let encoder = new TextEncoder("utf-8");
    let encodedSecret = encoder.encode(secret);
    let encodedData = encoder.encode(data);

    // Create our HMAC Key
    let key = await this._crypto.subtle.importKey(
      "raw",
      encodedSecret,
      { name: "HMAC", hash: { name: "SHA-256" } },
      false,
      ["sign", "verify"]
    );

    // HMAC Sign our data with our HMAC Key
    let sig = await this._crypto.subtle.sign("HMAC", key, encodedData);

    // Turn the signature into an array; then into hex-text
    // (todo: Maybe this is its own method...?)
    //
    let b = new Uint8Array(sig);
    let str = Array.prototype.map
      .call(b, (x) => ("00" + x.toString(16)).slice(-2))
      .join("");

    return str;
  }


  // //////////////////////////////////////////////////////////////////////////
  // //////////////////////////////////////////////////////////////////////////
  //
  // Function:     HASH (static) (async)
  // What is this: The digest() method of the SubtleCrypto interface generates a digest of the given data. 
  //               A digest is a short fixed-length value derived from some variable-length input.
  //               Cryptographic digests should exhibit collision-resistance, meaning that it's hard to come up 
  //               with two different inputs that have the same digest value.
  //
  // Arguments:    algo - this is the string you're hashing for
  //               data   - This is the algorithm you're using to hash the data with (SHA-1, SHA-256, SHA-384, SHA-512)
  //
  // Returns:      the hash of the data you provided as a base64 string
  //
  // \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
  // \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
  HASH = async (algo, data, len) => {

    await this._sleep(0);

    let hash = await this._crypto.subtle.digest(algo, new TextEncoder().encode(data));
    
    let ary = new Uint8Array(hash);

    let outAry;

    if(len){
      // initialize outAry to the desired size
      outAry = new Uint8Array(len,0);

      Math.min(len, ary.length);
      let max = Math.max(len, ary.length);

      for(var i = 0; i < max; i++){
        outAry[i%len] = outAry[i%len] ^ ary[i%ary.length];
      }
    } else {
      outAry = ary;
    }

    return this.arrayToBase64(new Uint8Array(outAry));

  }



  // //////////////////////////////////////////////////////////////////////////
  // //////////////////////////////////////////////////////////////////////////
  //
  //
  // Function:     PASSWORD_ENCRYPT
  // What is this: Dead simple method to encrypt a piece of data with a password
  //               that can later be decrypted needing only that password 
  //
  // Arguments:    password: string; plaintext string of user's password
  //               base64data: string; what you want to encrypt
  //
  // Returns:      base64 encoded, stringified object containing the AES key used
  //               to encrypt the data, and the ciphertext itself
  // Notes:
  //
  //
  // \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
  // \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
  PASSWORD_ENCRYPT = async(password, base64data) => {

      await this._sleep(0);

      for(let i = 0; i < 10; i++){
        password = await this.HASH("SHA-512", password);
      }
      
      let passwordHash = btoa(password);
    
      let aes = await this.AESMakeKey(true);

      let output = await this.AESEncrypt(aes, base64data, passwordHash);

      return btoa(JSON.stringify({ciphertext: output.ciphertext, aes}));
  }



  // //////////////////////////////////////////////////////////////////////////
  // //////////////////////////////////////////////////////////////////////////
  //
  //
  // Function:     PASSWORD_DECRYPT
  // What is this: Counterparty to PASSWORD_ENCRYPT. Give it a password, and
  //               the encrypted data from PASSWORD_ENCRYPT; it should give you
  //               the initial plaintext...
  //
  // Arguments:    password: string; plaintext string of user's password
  //               base64data: password-data
  //
  // Returns:      plaintext
  //
  // Notes:
  //
  //
  // \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
  // \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
  PASSWORD_DECRYPT = async(password, base64data) => {

    await this._sleep(0);

    for(let i = 0; i < 10; i++){
      password = await this.HASH("SHA-512", password);
    }
      
    let passwordHash = btoa(password);

    let encryptedDataObject = JSON.parse(atob(base64data));
  
    let aes = await this.AESImportKey(encryptedDataObject.aes,false);

    let ciphertext = encryptedDataObject.ciphertext;

    let plaintext = await this.AESDecrypt(aes, passwordHash, ciphertext, true);

    return plaintext;
}








  // //////////////////////////////////////////////////////////////////////////
  // //////////////////////////////////////////////////////////////////////////
  //
  // Function:     AESMakeKey (async)
  // What is this: Generate an AES Key and return its hex
  //
  // Arguments:    *NONE*
  //
  // Returns:      base64 string
  // Notes:
  //
  // \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
  // \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

  AESMakeKey = async (exportable = true) => {
    await this._sleep(0);

    // 1.) Generate the Key
    let key = await this._crypto.subtle.generateKey(
      { name: "AES-GCM", length: 256 },
      exportable,
      ["encrypt", "decrypt"]
    );


    // 2.) 
    if(exportable){
      //Return it as b64 if its exportable
      
      let out = await this._crypto.subtle.exportKey("raw", key);
      return this.arrayToBase64(new Uint8Array(out));
    } else {
      // else return the CryptoKey Object
      
      return key;
    }
  };
  
  
  // //////////////////////////////////////////////////////////////////////////
  // //////////////////////////////////////////////////////////////////////////
  //
  // Function:     AESImportKey (async)
  // What is this: Generate an AES Key and return its hex
  //
  // Arguments:    base64 string
  //
  // Returns:      Live AES Key
  // Notes:
  //
  // \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
  // \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

  AESImportKey = async (aes_key, exportable = true) => {
    await this._sleep(0);


    if(aes_key instanceof this._crypto.CryptoKey){
      return aes_key;
    } else {

      // 1.) Generate the Key
      return await this._crypto.subtle.importKey(
          "raw",
          this.base64ToArray(aes_key).buffer,
          "AES-GCM",
          exportable,
          ["encrypt", "decrypt"]
        );
    }
  };

  // //////////////////////////////////////////////////////////////////////////
  // //////////////////////////////////////////////////////////////////////////
  //
  // Function:     AESEncrypt (async)
  // What is this: Given
  //
  // Arguments:    key:  base64 AES-key
  //               data: uInt8Array
  //
  // Returns:      base64 string
  // Notes:
  //
  // \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
  // \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

  async AESEncrypt(base_64_key, base_64_data, base_64_nonce = false) {
    await this._sleep(0);
    
    // 0.) Pass Key to 
    let aes_key = await this.AESImportKey(base_64_key);


    // 3.) Create a nonce why not?
    let nonce;
    
    if(base_64_nonce){
      nonce = this.base64ToArray(base_64_nonce);
    } else {
      nonce = this._crypto.getRandomValues(new Uint8Array(16));
    }

    // 4.) encrypt our data
    let encrypted = await this._crypto.subtle.encrypt(
      { name: "AES-GCM", iv: nonce },
      aes_key,
      this.base64ToArray(base_64_data)
    );

    // 5.) Base64 and return our data...
    return {
      ciphertext: this.arrayToBase64(new Uint8Array(encrypted)),
      iv: this.arrayToBase64(nonce),
    };
  }

  // //////////////////////////////////////////////////////////////////////////
  // //////////////////////////////////////////////////////////////////////////
  //
  // Function:     AESDecrypt (async)
  // What is this: Given
  //
  // Arguments:    key:  base64 AES-key
  //               nonce: base64 of the nonce used at encryption (ok if it is public)
  //               ciphertext: base64 of what's been encoded
  //
  // Returns:      base64 string
  // Notes:
  //
  // \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
  // \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

  async AESDecrypt(base_64_key, base_64_nonce, base_64_cipher, returnText = false) {
    await this._sleep(0);

    // 1.) Convert out from base64 to array
    let aes_key = await this.AESImportKey(base_64_key);
    let nonce_ary = this.base64ToArray(base_64_nonce);
    let cipher_ary = this.base64ToArray(base_64_cipher);
    let decrypted;



    // 3.) Decrypt
    decrypted = await this._crypto.subtle.decrypt(
      { name: "AES-GCM", iv: nonce_ary },
      aes_key,
      cipher_ary
    );

    if(!returnText){
      return decrypted;
    } else {
      decrypted = new Uint8Array(decrypted);

      decrypted = new TextDecoder().decode(decrypted);

      return decrypted;
    }
  }

  // //////////////////////////////////////////////////////////////////////////
  // //////////////////////////////////////////////////////////////////////////
  //
  // Function:     EcMakeCryptKeys (async)
  // What is this: Given
  //
  // Arguments:    none
  //
  // Returns:      object containing public and private key pair
  // Notes:
  //
  // \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
  // \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

  EcMakeCryptKeys = async (exportable = true) => {
    await this._sleep(0);

    // Step 1) Create ECDH KeyS
    let keys = await this._crypto.subtle.generateKey(
      { name: "ECDH", namedCurve: "P-256" },
      exportable,
      ["deriveKey","deriveBits"]
    );

    // Step 2) Export keys to SPKI|PKCS8|JWK|RAW format
    let exportKeys;

    if(exportable){
      exportKeys = await Promise.all([
          this._crypto.subtle.exportKey("spki", keys.publicKey).then((key) => {
            return this.arrayToBase64(new Uint8Array(key));
          }),
          this._crypto.subtle.exportKey("pkcs8", keys.privateKey).then((key) => {
            return this.arrayToBase64(new Uint8Array(key));
          }),
          this._crypto.subtle.exportKey("jwk", keys.publicKey).then((key) => {
            return (key);
          }),
          this._crypto.subtle.exportKey("jwk", keys.privateKey).then((key) => {
            return (key);
          }),
          this._crypto.subtle.exportKey("raw", keys.publicKey).then((key) => {
            return this.arrayToBase64( new Uint8Array(key));
          }),
          this._crypto.subtle.exportKey("raw", keys.publicKey).then((key) => {
            return this.arrayToBase64( new Uint8Array(key).slice(1,1000));
          })
      ]);
      
    } else {
      exportKeys = await Promise.all([
        //
          this._crypto.subtle.exportKey("spki", keys.publicKey).then((key) => {
            return this.arrayToBase64(new Uint8Array(key));
          }),
        //
        (new Promise((s,j) => {return s(keys.privateKey)})),
        //
          this._crypto.subtle.exportKey("raw", keys.publicKey).then((key) => {
            return this.arrayToBase64( new Uint8Array(key));
          }),
        //
          this._crypto.subtle.exportKey("raw", keys.publicKey).then((key) => {
            return this.arrayToBase64( new Uint8Array(key).slice(1,1000));
          })
      ]);
    }

    if(exportable){
      return { 
        publicKey: exportKeys[0], 
        privateKey: exportKeys[1], 
        jwkPublicKey: exportKeys[2], 
        jwkPrivateKey: exportKeys[3], 
        rawPublicKey: exportKeys[4],
        rawPublicKeyLite: exportKeys[5]
      };
    } else {
        return { 
          publicKey: exportKeys[0], 
          privateKey: exportKeys[1], 
          rawPublicKey: exportKeys[2], 
          rawPublicKeyLite: exportKeys[3]
        };
    }

    // Step 3) Convert the keys to base64 and return...
  };

  // //////////////////////////////////////////////////////////////////////////
  // //////////////////////////////////////////////////////////////////////////
  //
  // Function:     EcEncrypt (async)
  // What is this: Encrypt Uint8Data with 2 SPKI-Encoded ECDH Keys.
  //               ---
  //               Basically it does the dirty work of:
  //               - convert base64 keys to live keys
  //               - creating AES key from live keys
  //               - encrypting data with AES Key
  //               - return base64 ciphertext and nonce
  //
  //
  // Arguments:    base64privateKey: string;
  //               base64publicKey: string;
  //               base64data: string;
  //
  // Returns:      object containing public and private key pair
  // Notes:
  //
  // \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
  // \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

  EcEncrypt = async (b64Private, b64Public, b64data) => {
    await this._sleep(0);

    // 1.) convert the given keys to real keys in the most
    //     generic way possible...
    let publicKey = await this.EcdhConvertKey(b64Public);
    let privateKey = await this.EcdhConvertKey(b64Private);
    
    // 2.) generate shared key
    let aes_key = await this._crypto.subtle.deriveKey(
      { name: "ECDH", public: publicKey },
      privateKey,
      { name: "AES-GCM", length: 256 },
      false,
      ["encrypt", "decrypt"]
    );
    
    // 3.) Work smarter, not harder, dummy...
    return await this.AESEncrypt(aes_key, b64data);
  
  };

  // //////////////////////////////////////////////////////////////////////////
  // //////////////////////////////////////////////////////////////////////////
  //
  // Function:     EcDecrypt (async)
  // What is this: Decrypt Uint8Data with 2 SPKI-Encoded ECDH Keys.
  //               ---
  //               Basically it does the dirty work of:
  //               - convert base64 keys to live keys
  //               - creating AES key from live keys
  //               - encrypting data with AES Key
  //               - return base64 ciphertext and nonce
  //
  //
  // Arguments:    base64privateKey: string;
  //               base64publicKey: string;
  //               base64nonce: string;
  //               base64data: string;
  //
  // Returns:      object containing public and private key pair
  // Notes:
  //
  // \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
  // \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

  EcDecrypt = async (b64Private, b64Public, b64Nonce, b64data, returnText = false) => {

    // 1.) convert the given keys to real keys in the most
    //     generic way possible...
    let publicKey = await this.EcdhConvertKey(b64Public);
    let privateKey = await this.EcdhConvertKey(b64Private);
    let nonce = this.base64ToArray(b64Nonce);
    let data = this.base64ToArray(b64data);
    let decrypted;

    // 2.) generate shared key
    let aes_key = await this._crypto.subtle.deriveKey(
      { name: "ECDH", public: publicKey },
      privateKey,
      { name: "AES-GCM", length: 256 },
      false,
      ["encrypt", "decrypt"]
    );

    // 3..) decrypt our data
    const decryptedData = await this._crypto.subtle.decrypt(
      { name: "AES-GCM", iv: nonce },
      aes_key,
      data
    );

    if(!returnText){
      return decryptedData;
    } else {
      decrypted = new Uint8Array(decryptedData);
      decrypted = new TextDecoder().decode(decrypted);
      return decrypted;
    }
  };
  



















  // //////////////////////////////////////////////////////////////////////////
  // //////////////////////////////////////////////////////////////////////////
  //
  // Function:     HKDFEncrypt (async)
  // What is this: Encrypt Uint8Data with 2 SPKI-Encoded ECDH Keys.
  //               ---
  //               Basically it does the dirty work of:
  //               - convert base64 keys to live keys
  //               - creating AES key from live keys
  //               - encrypting data with AES Key
  //               - return base64 ciphertext and nonce
  //
  //
  // Arguments:    base64privateKey: string;
  //               base64publicKey: string;
  //               base64data: string;
  //
  // Returns:      object containing public and private key pair
  // Notes:
  //
  // \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
  // \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

  HKDFEncrypt = async (b64Private, b64Public, b64data) => {
    await this._sleep(0);

    // 1.) convert the given keys to real keys in the most
    //     generic way possible...
    let publicKey = await this.EcdhConvertKey(b64Public);
    let privateKey = await this.EcdhConvertKey(b64Private);
    
    // 2.) generate shared secret for HKDF
    //
    let sharedSecret = await this._crypto.subtle.deriveBits({ 
      "name": "ECDH", 
      "namedCurve": "P-256", 
      "public": publicKey 
    },privateKey,256);
    
    // 3.) convert shared-secret into a key
    //
    let sharedSecretKey = await this._crypto.subtle.importKey(
      "raw", sharedSecret, 
      { "name": 'HKDF' }, 
      false, 
      ['deriveKey','deriveBits']
    );
    
    // 4.) create SALT
    //
    let salt = this._crypto.getRandomValues(new Uint8Array(16));
    
    // 5.) convert the live-shared-secret-key into an aes key
    //
    let derivedKey = await this._crypto.subtle.deriveBits({
      "name": 'HKDF', 
      "hash": 'SHA-256', 
      "salt": salt,
      "info": new Uint8Array([])},
      sharedSecretKey,256
    );
    
    //
    // 6.) 
    // THIS SHOULD NOT BE THIS HARD!
    //
    //     Convert the Key-Array to a live Key
    let aes_key = await this._crypto.subtle.importKey(
      "raw",
      derivedKey,
      "AES-GCM",
      false,
      ["encrypt","decrypt"]
    );
    
    // 7.) Init Vector
    //
    //
    let iv = this._crypto.getRandomValues(new Uint8Array(16));
    
    // 7.) Encrypt
    //
    //
    let encrypted = await this._crypto.subtle.encrypt(
      { name: "AES-GCM", iv: iv },
      aes_key,
      this.base64ToArray(b64data)
    );
    
    // 8.) Base64 and return our data...
    return {
      "ciphertext": this.arrayToBase64(new Uint8Array(encrypted)),
      "salt": this.arrayToBase64(salt),
      "iv": this.arrayToBase64(iv)
    };

  
  };

  // //////////////////////////////////////////////////////////////////////////
  // //////////////////////////////////////////////////////////////////////////
  //
  // Function:     HKDFDecrypt (async)
  // What is this: Decrypt Uint8Data with 2 SPKI-Encoded ECDH Keys.
  //               ---
  //               Basically it does the dirty work of:
  //               - convert base64 keys to live keys
  //               - creating AES key from live keys
  //               - encrypting data with AES Key
  //               - return base64 ciphertext and nonce
  //
  //
  // Arguments:    base64privateKey: string;
  //               base64publicKey: string;
  //               base64nonce: string;
  //               base64data: string;
  //
  // Returns:      object containing public and private key pair
  // Notes:
  //
  // \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
  // \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

  HKDFDecrypt = async (b64Private, b64Public, b64Salt, b64iv, b64data, returnText = false) => {
    await this._sleep(0);

    // 1.) convert the given keys to real keys in the most
    //     generic way possible...
    let publicKey = await this.EcdhConvertKey(b64Public);
    
    let privateKey = await this.EcdhConvertKey(b64Private);
    
    let salt = this.base64ToArray(b64Salt);
    let iv = this.base64ToArray(b64iv);
    let data = this.base64ToArray(b64data);

    let decrypted;
    
    
    // 2.) generate shared secret for HKDF
    //
    let sharedSecret = await this._crypto.subtle.deriveBits({ 
      "name": "ECDH", 
      "namedCurve": "P-256", 
      "public": publicKey 
    },privateKey,256);
    
    // 3.) convert shared-secret into a key
    //
    let sharedSecretKey = await this._crypto.subtle.importKey(
      "raw", sharedSecret, 
      { "name": 'HKDF' }, 
      false, 
      ['deriveKey','deriveBits']
    );
    
    // 4.) convert the live-shared-secret-key into an aes key
    //
    let derivedKey = await this._crypto.subtle.deriveBits({
      "name": 'HKDF', 
      "hash": 'SHA-256', 
      "salt": salt,
      "info": new Uint8Array([])},
      sharedSecretKey,256
    );

    //
    // 5.) 
    //     Convert the Key-Array to a live Key
    let aes_key = await this._crypto.subtle.importKey(
      "raw",
      derivedKey,
      "AES-GCM",
      false,
      ["encrypt","decrypt"]
    );

    // 6.) decrypt our data
    //
    let aes_data;
    try{
        aes_data = await this._crypto.subtle.decrypt(
        { name: "AES-GCM", iv: iv },
        aes_key,
        data
      );
    } catch(e){
      console.log({name: e.name, stack: e.stack, message: e.message});
      throw e;
    }

    if(!returnText){
      return aes_data;
    } else {
      decrypted = new Uint8Array(aes_data);
      decrypted = new TextDecoder().decode(decrypted);
      return decrypted;
    }

  };
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  // //////////////////////////////////////////////////////////////////////////
  // //////////////////////////////////////////////////////////////////////////
  //
  // Function:     EcMakeSigKeys (async)
  // What is this: Given
  //
  // Arguments:    none
  //
  // Returns:      object containing public and private key pair
  // Notes:
  //
  // \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
  // \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
  
  EcMakeSigKeys = async (exportable = true) => {
    await this._sleep(0);

  // Step 1) Create ECDSA KeyS
    let keys = await this._crypto.subtle.generateKey(
      { name: "ECDSA", namedCurve: "P-256" },
      exportable,
      ["sign","verify"]
    );
    
    let b64Keys;

  // Step 2a) IF EXTRACTABLE: Export keys to SPKI|PKCS8 format
    if(exportable){
      b64Keys = await Promise.all([
        this._crypto.subtle.exportKey("spki", keys.publicKey).then((key) => {
          return this.arrayToBase64(new Uint8Array(key));
        }),
        this._crypto.subtle.exportKey("pkcs8", keys.privateKey).then((key) => {
          return this.arrayToBase64(new Uint8Array(key));
        })
      ]);
      
      return { publicKey: b64Keys[0], privateKey: b64Keys[1] };

    } else {
      
  // Step 2b) NOT NOT NOT EXTRACTABLE: Export just the public key
      b64Keys = await Promise.all([
        this._crypto.subtle.exportKey("spki", keys.publicKey).then((key) => {
          return this.arrayToBase64(new Uint8Array(key));
        })
      ]);
      return { publicKey: b64Keys[0], privateKey: keys.privateKey };
    }

  };
  
  
  
  // //////////////////////////////////////////////////////////////////////////
  // //////////////////////////////////////////////////////////////////////////
  //
  // Function:     EcSignData (async)
  // What is this: Create a crypto-signature from a private key and data
  //
  // Arguments:    base64privateKey: string;
  //               data: Uint8Array;
  //
  // Returns:      base64 encoded signature
  // Notes:
  //
  // \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
  // \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

  EcSignData = async (b64PrivateKey, b64data) => {
    await this._sleep(0);

    // 1.) convert the given keys to real keys
    let privateKey = await this.EcdsaConvertKey(b64PrivateKey);

    // 2.) sign the data with the live key
    let signature = await this._crypto.subtle.sign({"name": "ECDSA", "hash": {"name": "SHA-256"}}, privateKey, this.base64ToArray(b64data));

    // 3.) Base64 and return our data...
    return  await this.arrayToBase64(new Uint8Array(signature));
  
  };
  
  
  // //////////////////////////////////////////////////////////////////////////
  // //////////////////////////////////////////////////////////////////////////
  //
  // Function:     EcVerifySig (async)
  // What is this: Given a public key, some data, and a signature; prove the
  //               signature came from the data and the public key
  //
  // Arguments:    base64PublicKey: string;
  //               data: Uint8Array;
  //
  // Returns:      base64 encoded signature
  // Notes:
  //
  // \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
  // \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

  EcVerifySig = async (b64PublicKey, b64Signature, b64data) => {
    await this._sleep(0);

    // 1.) convert the given keys to real keys
    let publicKey = await this.EcdsaConvertKey(b64PublicKey);
    

    // 2.) Convert the signature to an array
    let signature = this.base64ToArray(b64Signature);

    // 3.) verify the data with the live key
    return await this._crypto.subtle.verify({"name": "ECDSA", "hash": {"name": "SHA-256"}}, publicKey, signature, this.base64ToArray(b64data));

  };
  
  
  
  
  
  
  
  // //////////////////////////////////////////////////////////////////////////
  // //////////////////////////////////////////////////////////////////////////
  //
  // Function:     EzConvertKey (base64key)
  // What is this: Sloppy AF function to try converting random data into a key
  //               until something works...
  //
  // Arguments:    none
  //
  // Returns:      hopefully a live key...probably an error and an hour of debugging.
  // Notes:
  //
  // \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
  // \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
  
  
  
  EcdhConvertKey = async (unknown_key) => {
    await this._sleep(0);

    let key;
    let longKey;
    
    // \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
    // \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
    // NATURAL KEY
    if(unknown_key instanceof this._crypto.CryptoKey){
      return unknown_key;
    }
    //
    //
    // \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
    // \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
    // SPKI PUBLIC?
    //
    //
    try {
      key = await this._crypto.subtle.importKey(
        "spki",
        this.base64ToArray(unknown_key),
        { name: "ECDH", namedCurve: "P-256" },
        true,
        []
      );
      return key;

    } catch(e){} // DO NOTHING!!!
    //
    //
    // \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
    // \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
    // RAW PUBLIC
    //
    //
    try {
      key = await this._crypto.subtle.importKey(
        "raw",
        this.base64ToArray(unknown_key),
        { name: "ECDH", namedCurve: "P-256" },
        true,
        []
      );
      return key;
      
    } catch(e){} // DO NOTHING!!!
    //
    //
    // \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
    // \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
    // PKCS8 PRIVATE
    //
    //
    try{
      key = await this._crypto.subtle.importKey(
        "pkcs8",
        this.base64ToArray(unknown_key),
        { name: "ECDH", namedCurve: "P-256" },
        false,
        ["deriveKey","deriveBits"]
      );
      return key;
      
    } catch(e){} // DO NOTHING!!!
    //
    //
    // \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
    // \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
    // RAW PUBLIC - PERVERTED
    //
    //
    try {
      
      longKey = new Uint8Array([4].concat(Array.from(this.base64ToArray(unknown_key))));
      key = await this._crypto.subtle.importKey(
        "raw",
        longKey,
        { name: "ECDH", namedCurve: "P-256" },
        true,
        []
      );
      return key;
      
    } catch(e){
      throw new Error("UNRECOGNIZED KEY FORMAT");
    }



  }




  // //////////////////////////////////////////////////////////////////////////
  // //////////////////////////////////////////////////////////////////////////
  //
  // Function:     EcdsaConvertKey (some sort of key)
  // What is this: Sloppy AF function to try converting random data into a key
  //               until something works...
  //
  // Arguments:    none
  //
  // Returns:      hopefully a live key...probably an error and an hour of debugging.
  // Notes:
  //
  // \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
  // \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
  
  EcdsaConvertKey = async (unknown_key) => {
    await this._sleep(0);

    let key;
    let longKey;
    
    
    // \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
    // \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
    // NATURAL KEY
    if(unknown_key instanceof this._crypto.CryptoKey){
      return unknown_key;
    }
    
    
    //
    //
    // \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
    // \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
    // SPKI PUBLIC?
    //
    //
    try {
      
      key = await this._crypto.subtle.importKey(
        "spki",
        this.base64ToArray(unknown_key),
        { name: "ECDSA", namedCurve: "P-256" },
        true,
        ["verify"]
      );
      
      return key;
      
    } catch(e){} // DO NOTHING!

    //
    //
    // \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
    // \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
    // RAW PUBLIC
    //
    //
    try {
      
      key = await this._crypto.subtle.importKey(
        "raw",
        this.base64ToArray(unknown_key),
        { name: "ECDSA", namedCurve: "P-256" },
        true,
        ["verify"]
      );

      return key;
      
    } catch(e){} // DO NOTHING!

    //
    //
    // \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
    // \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
    // PKCS8 PRIVATE
    //
    //
    try{

      key = await this._crypto.subtle.importKey(
        "pkcs8",
        this.base64ToArray(unknown_key),
        { name: "ECDSA", namedCurve: "P-256" },
        false,
        ["sign"]
      );

      return key;
      
    } catch(e){} // DO NOTHING

    //
    //
    // \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
    // \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
    // RAW PUBLIC - PERVERTED
    //
    //
    try {

      longKey = new Uint8Array([4].concat(Array.from(this.base64ToArray(unknown_key))));
      key = await this._crypto.subtle.importKey(
        "raw",
        longKey,
        { name: "ECDSA", namedCurve: "P-256" },
        true,
        ["sign"]
      );

      return key;
      
    } catch(e){
      throw new Error("UNRECOGNIZED KEY FORMAT");
    }

  }

  
  
}
// \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
// \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
// \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

/**
 * A class to simplify interactions with IndexedDB.
 */
class EZindexDB{
  
  #database;
  
  /**
   * Initializes a connection to the database or creates it if it doesn't exist.
   * 
   * @param {string} database - The name of the database.
   * @param {string} table - The name of the table (object store).
   * @param {Array<string>} [indexes] - An array of index names to be created.
   * @returns {Promise<boolean>} Resolves to true if successful.
   */
  start = (database, table, indexes) => {
    return new Promise((resolve, reject) => {
      // start connection to DB, then, listen for events
      const openRequest = indexedDB.open(database, 1);
  
      // handle error
      openRequest.onerror = event => {
        reject(event.target.error);
      };
  
      // upgradeNeeded ???
      openRequest.onupgradeneeded = event => {
        this.#database = event.target.result;
        const store = this.#database.createObjectStore(table, {"keyPath": "id"});
        
        // If we're taking indexes, let's create indexes
        if(indexes){
          indexes.forEach((index) => store.createIndex(index,index));
        }
      };
  
      openRequest.onsuccess = event => {
        this.#database = event.target.result;
        resolve(true);
      };
    });
  }
  
  /**
   * Creates a transaction for internal use.
   * 
   * @private
   * @param {string} table - The name of the table (object store).
   * @returns {IDBObjectStore} The object store for the specified table.
   */
  #transaction = async(table) => {
    const transaction = await this.#database.transaction(table, 'readwrite');
    const store = transaction.objectStore(table);
    return store;
  }
  
  
  /**
   * Adds a record to the database if it doesn't exist.
   * Throws an error if the record already exists.
   * 
   * @param {string} table - The name of the table (object store).
   * @param {Object} data - The data to be added.
   * @returns {Promise<IDBValidKey>} Resolves to the key of the added record.
   */
  creates = (table, data) => {
    return new Promise((resolve, reject) => {
      // start a transaction
      const transaction = this.#database.transaction(table, 'readwrite');
      const store = transaction.objectStore(table);
  
      // Try adding data to the store
      const request = store.add(data);
  
      request.onsuccess = () => {
        resolve(request.result);
      };
  
      request.onerror = (event) => {
        console.error("Error adding data to IndexedDB:", event.target.error);
        reject(event.target.error);
      };
  
      // Handle transaction errors
      transaction.onerror = (event) => {
        console.error("Transaction error:", event.target.error);
      };
    });
  }
  
  
  /**
   * Retrieves a record from the database by its ID.
   * 
   * @param {string} table - The name of the table (object store).
   * @param {IDBValidKey} id - The ID of the record to retrieve.
   * @returns {Promise<Object>} Resolves to the retrieved record.
   */
  reads = (table, id) => {
    return new Promise((resolve, reject) => {
      // start a transaction
      const transaction = this.#database.transaction(table, 'readonly');
      const store = transaction.objectStore(table);
      
      // Try getting some information out of the database
      const request = store.get(id);
      
      request.onsuccess = () => {
        resolve(request.result);
      };
  
      request.onerror = (event) => {
        console.error("Error reading data from IndexedDB:", event.target.error);
        reject(event.target.error);
      };
  
      // Handle transaction errors
      transaction.onerror = (event) => {
        console.error("Transaction error:", event.target.error);
      };
    });
  }
  
  
  /**
   * Updates an existing record in the database.
   * Throws an error if the record doesn't exist.
   * 
   * @param {string} table - The name of the table (object store).
   * @param {Object} data - The data to update.
   * @returns {Promise<IDBValidKey>} Resolves to the key of the updated record.
   */
  updates = (table, data) => {
    return new Promise(async (resolve, reject) => {
      // see if the thing exists first.
      // if not, fail it
      let test_data = await this.reads(table, data.id);
      
      if(!test_data){
        reject(new Error("A record must exist before you can update it"));
      }
  
      // start a transaction
      const transaction = this.#database.transaction(table, 'readwrite');
      const store = transaction.objectStore(table);
      
      // Try updating data in the store
      const request = store.put({...test_data, ...data});
      
      request.onsuccess = () => {
        resolve(request.result);
      };
  
      request.onerror = (event) => {
        console.error("Error updating data in IndexedDB:", event.target.error);
        reject(event.target.error);
      };
  
      // Handle transaction errors
      transaction.onerror = (event) => {
        console.error("Transaction error:", event.target.error);
      };
    });
  }
  
  /**
   * Inserts or updates a record in the database.
   * 
   * @param {string} table - The name of the table (object store).
   * @param {Object} data - The data to insert or update.
   * @returns {Promise<IDBValidKey>} Resolves to the key of the inserted or updated record.
   */
  upserts = (table, data) => {
    return new Promise(async (resolve, reject) => {
      // see if the thing exists first.
      // if not, fail it
      let test_data = await this.reads(table, data.id);
  
      // start a transaction
      const transaction = this.#database.transaction(table, 'readwrite');
      const store = transaction.objectStore(table);
      let request;

      // Try updating data in the store
      if(test_data){
        request = store.put({...test_data, ...data});
      } else {
        request = store.add(data);
      }
 
      
      request.onsuccess = () => {
        resolve(request.result);
      };
  
      request.onerror = (event) => {
        console.error("Error updating data in IndexedDB:", event.target.error);
        reject(event.target.error);
      };
  
      // Handle transaction errors
      transaction.onerror = (event) => {
        console.error("Transaction error:", event.target.error);
      };
    });
  }
  
  /**
   * Deletes a record from the database by its ID.
   * 
   * @param {string} table - The name of the table (object store).
   * @param {IDBValidKey} id - The ID of the record to delete.
   * @returns {Promise<boolean>} Resolves to true if the deletion was successful.
   */
  deletes = (table, id) => {
    return new Promise((resolve, reject) => {
      // start a transaction
      const transaction = this.#database.transaction(table, 'readwrite');
      const store = transaction.objectStore(table);
      
      // Try deleting the record from the store
      const request = store.delete(id);
      
      request.onsuccess = () => {
        resolve(true);
      };
  
      request.onerror = (event) => {
        console.error("Error deleting record from IndexedDB:", event.target.error);
        reject(event.target.error);
      };
  
      // Handle transaction errors
      transaction.onerror = (event) => {
        console.error("Transaction error:", event.target.error);
      };
    });
  }
  
  /**
   * Searches for records in the database by a specified field and value.
   * 
   * @param {string} table - The name of the table (object store).
   * @param {string} field - The name of the field to search by.
   * @param {any} value - The value to search for.
   * @returns {Promise<Array<Object>>} Resolves to an array of matching records.
   */
  searches = (table, field, value) => {
    return new Promise((resolve, reject) => {
      // start a transaction
      const transaction = this.#database.transaction(table, 'readonly');
      const store = transaction.objectStore(table);
      
      // Set Reference to our Index
      let ndx = store.index(field);
      
      // Try getting some information out of the database
      const request = ndx.getAll(value);
      
      request.onsuccess = () => {
        // The result of the request will be in request.result
        resolve(request.result);
      };
  
      request.onerror = (event) => {
        console.error("Error reading from IndexedDB:", event.target.error);
        reject(event.target.error);
      };
      
      // Handle transaction errors
      transaction.onerror = (event) => {
        console.error("Transaction error:", event.target.error);
      };
    });

  }

    
  /**
   * Retrieves all records from a table.
   * 
   * @param {string} table - The name of the table (object store).
   * @returns {Promise<Array<Object>>} Resolves to an array of all records.
   */
  getAll = (table) => {
    return new Promise((resolve, reject) => {
      const transaction = this.#database.transaction(table, 'readonly');
      const store = transaction.objectStore(table);
      const request = store.openCursor();
      const allRecords = [];

      request.onsuccess = (event) => {
        const cursor = event.target.result;
        if (cursor) {
          allRecords.push(cursor.value);
          cursor.continue();
        } else {
          resolve(allRecords);
        }
      };

      request.onerror = (event) => {
        console.error("Error retrieving all records from IndexedDB:", event.target.error);
        reject(event.target.error);
      };

      transaction.onerror = (event) => {
        console.error("Transaction error:", event.target.error);
      };
    });
  }

  /**
   * Counts the number of records in a table.
   * 
   * @param {string} table - The name of the table (object store).
   * @returns {Promise<number>} Resolves to the count of records.
   */
  countRecords = (table) => {
    return new Promise((resolve, reject) => {
      const transaction = this.#database.transaction(table, 'readonly');
      const store = transaction.objectStore(table);
      const request = store.count();

      request.onsuccess = () => {
        resolve(request.result);
      };

      request.onerror = (event) => {
        console.error("Error counting records in IndexedDB:", event.target.error);
        reject(event.target.error);
      };

      transaction.onerror = (event) => {
        console.error("Transaction error:", event.target.error);
      };
    });
  }

  
}

/////////////////////////////////
// DEMO:
/////////////////////////////////

/*
// Instantiate the DB
  let ez = new EZindexDB();
  
//
// List any of the fields we might want to search on
// that aren't "id"
//
  await ez.start("company","people",["name"]);

//
// Demonstration of adding people to our DB
//
  await ez.creates("people",{"id": "1", "salary": 12, "name": "STEVE"});
  await ez.creates("people",{"id": "2", "salary": 12, "name": "EDDY"});
  await ez.creates("people",{"id": "3", "salary": 12, "name": "JOE"});
  await ez.creates("people",{"id": "4", "salary": 13, "name": "JOE"});

//
// Find everybody named "JOE"
//
  let data = await ez.searches("people","name", "JOE");
  
//
// Set Joe's Salary to 12_000
//
  await ez.updates("people",{"id": "3", "salary": 12_000});
  
//
// Make sure we can't 'upsert' a record
//
  await ez.updates("people",{"id": "newb", "salary": 12_000});  // this one fails
*/



/**
 * A class to simulate interactions with IndexedDB using in-memory storage.
 */
class SynthEzIndexDB {
  /**
   * In-memory storage object.
   * @type {Object}
   * @private
   */
  #inMemoryStorage = {};

  /**
   * Initializes a connection to the in-memory database or creates it if it doesn't exist.
   * 
   * @param {string} database - The name of the database.
   * @param {string} table - The name of the table (object store).
   * @param {Array<string>} [indexes] - An array of index names to be created (ignored in this implementation).
   * @returns {Promise<boolean>} Resolves to true if successful.
   */
  start = async (database, table, indexes) => {
    if (!this.#inMemoryStorage[database]) {
      this.#inMemoryStorage[database] = {};
    }
    if (!this.#inMemoryStorage[database][table]) {
      this.#inMemoryStorage[database][table] = {};
    }
    return true;
  };

  /**
   * Adds a record to the in-memory database if it doesn't exist.
   * Throws an error if the record already exists.
   * 
   * @param {string} table - The name of the table (object store).
   * @param {Object} data - The data to be added.
   * @returns {Promise<string>} Resolves to the key of the added record.
   */
  creates = async (table, data) => {
    const db = this.#inMemoryStorage;
    if (!db[table]) {
      db[table] = {};
    }
    if (db[table][data.id]) {
      throw new Error("Record already exists");
    }
    db[table][data.id] = data;
    return data.id;
  };

  /**
   * Retrieves a record from the in-memory database by its ID.
   * 
   * @param {string} table - The name of the table (object store).
   * @param {string} id - The ID of the record to retrieve.
   * @returns {Promise<Object>} Resolves to the retrieved record.
   */
  reads = async (table, id) => {
    const db = this.#inMemoryStorage;
    return db[table] ? db[table][id] : undefined;
  };

  /**
   * Updates an existing record in the in-memory database.
   * Throws an error if the record doesn't exist.
   * 
   * @param {string} table - The name of the table (object store).
   * @param {Object} data - The data to update.
   * @returns {Promise<string>} Resolves to the key of the updated record.
   */
  updates = async (table, data) => {
    const db = this.#inMemoryStorage;
    if (!db[table] || !db[table][data.id]) {
      throw new Error("A record must exist before you can update it");
    }
    db[table][data.id] = { ...db[table][data.id], ...data };
    return data.id;
  };

  /**
   * Inserts or updates a record in the in-memory database.
   * 
   * @param {string} table - The name of the table (object store).
   * @param {Object} data - The data to insert or update.
   * @returns {Promise<string>} Resolves to the key of the inserted or updated record.
   */
  upserts = async (table, data) => {
    const db = this.#inMemoryStorage;
    if (!db[table]) {
      db[table] = {};
    }
    db[table][data.id] = { ...db[table][data.id], ...data };
    return data.id;
  };

  /**
   * Deletes a record from the in-memory database by its ID.
   * 
   * @param {string} table - The name of the table (object store).
   * @param {string} id - The ID of the record to delete.
   * @returns {Promise<boolean>} Resolves to true if the deletion was successful.
   */
  deletes = async (table, id) => {
    const db = this.#inMemoryStorage;
    if (!db[table] || !db[table][id]) {
      throw new Error("Record not found");
    }
    delete db[table][id];
    return true;
  };

  /**
   * Searches for records in the in-memory database by a specified field and value.
   * 
   * @param {string} table - The name of the table (object store).
   * @param {string} field - The name of the field to search by.
   * @param {any} value - The value to search for.
   * @returns {Promise<Array<Object>>} Resolves to an array of matching records.
   */
  searches = async (table, field, value) => {
    const db = this.#inMemoryStorage;
    if (!db[table]) {
      return [];
    }
    return Object.values(db[table]).filter(record => record[field] === value);
  };


  /**
   * Retrieves all records from a table in the in-memory database.
   * 
   * @param {string} table - The name of the table (object store).
   * @returns {Promise<Array<Object>>} Resolves to an array of all records.
   */
  getAll = async (table) => {
    const db = this.#inMemoryStorage;
    return db[table] ? Object.values(db[table]) : [];
  }

  /**
   * Counts the number of records in a table in the in-memory database.
   * 
   * @param {string} table - The name of the table (object store).
   * @returns {Promise<number>} Resolves to the count of records.
   */
  countRecords = async (table) => {
    const db = this.#inMemoryStorage;
    return db[table] ? Object.keys(db[table]).length : 0;
  }

}

/* [@simplewebauthn/browser@8.0.2] */
function utf8StringToBuffer(value) {
    return new TextEncoder().encode(value);
}

function bufferToBase64URLString(buffer) {
    const bytes = new Uint8Array(buffer);
    let str = '';
    for (const charCode of bytes) {
        str += String.fromCharCode(charCode);
    }
    const base64String = btoa(str);
    return base64String.replace(/\+/g, '-').replace(/\//g, '_').replace(/=/g, '');
}

function base64URLStringToBuffer(base64URLString) {
    const base64 = base64URLString.replace(/-/g, '+').replace(/_/g, '/');
    const padLength = (4 - (base64.length % 4)) % 4;
    const padded = base64.padEnd(base64.length + padLength, '=');
    const binary = atob(padded);
    const buffer = new ArrayBuffer(binary.length);
    const bytes = new Uint8Array(buffer);
    for (let i = 0; i < binary.length; i++) {
        bytes[i] = binary.charCodeAt(i);
    }
    return buffer;
}

function browserSupportsWebAuthn() {
    return (window?.PublicKeyCredential !== undefined &&
        typeof window.PublicKeyCredential === 'function');
}

function toPublicKeyCredentialDescriptor(descriptor) {
    const { id } = descriptor;
    return {
        ...descriptor,
        id: base64URLStringToBuffer(id),
        transports: descriptor.transports,
    };
}

function isValidDomain(hostname) {
    return (hostname === 'localhost' ||
        /^([a-z0-9]+(-[a-z0-9]+)*\.)+[a-z]{2,}$/i.test(hostname));
}

class WebAuthnError extends Error {
    constructor({ message, code, cause, name, }) {
        super(message, { cause });
        this.name = name ?? cause.name;
        this.code = code;
    }
}

function identifyRegistrationError({ error, options, }) {
    const { publicKey } = options;
    if (!publicKey) {
        throw Error('options was missing required publicKey property');
    }
    if (error.name === 'AbortError') {
        if (options.signal instanceof AbortSignal) {
            return new WebAuthnError({
                message: 'Registration ceremony was sent an abort signal',
                code: 'ERROR_CEREMONY_ABORTED',
                cause: error,
            });
        }
    }
    else if (error.name === 'ConstraintError') {
        if (publicKey.authenticatorSelection?.requireResidentKey === true) {
            return new WebAuthnError({
                message: 'Discoverable credentials were required but no available authenticator supported it',
                code: 'ERROR_AUTHENTICATOR_MISSING_DISCOVERABLE_CREDENTIAL_SUPPORT',
                cause: error,
            });
        }
        else if (publicKey.authenticatorSelection?.userVerification === 'required') {
            return new WebAuthnError({
                message: 'User verification was required but no available authenticator supported it',
                code: 'ERROR_AUTHENTICATOR_MISSING_USER_VERIFICATION_SUPPORT',
                cause: error,
            });
        }
    }
    else if (error.name === 'InvalidStateError') {
        return new WebAuthnError({
            message: 'The authenticator was previously registered',
            code: 'ERROR_AUTHENTICATOR_PREVIOUSLY_REGISTERED',
            cause: error,
        });
    }
    else if (error.name === 'NotAllowedError') {
        return new WebAuthnError({
            message: error.message,
            code: 'ERROR_PASSTHROUGH_SEE_CAUSE_PROPERTY',
            cause: error,
        });
    }
    else if (error.name === 'NotSupportedError') {
        const validPubKeyCredParams = publicKey.pubKeyCredParams.filter((param) => param.type === 'public-key');
        if (validPubKeyCredParams.length === 0) {
            return new WebAuthnError({
                message: 'No entry in pubKeyCredParams was of type "public-key"',
                code: 'ERROR_MALFORMED_PUBKEYCREDPARAMS',
                cause: error,
            });
        }
        return new WebAuthnError({
            message: 'No available authenticator supported any of the specified pubKeyCredParams algorithms',
            code: 'ERROR_AUTHENTICATOR_NO_SUPPORTED_PUBKEYCREDPARAMS_ALG',
            cause: error,
        });
    }
    else if (error.name === 'SecurityError') {
        const effectiveDomain = window.location.hostname;
        if (!isValidDomain(effectiveDomain)) {
            return new WebAuthnError({
                message: `${window.location.hostname} is an invalid domain`,
                code: 'ERROR_INVALID_DOMAIN',
                cause: error,
            });
        }
        else if (publicKey.rp.id !== effectiveDomain) {
            return new WebAuthnError({
                message: `The RP ID "${publicKey.rp.id}" is invalid for this domain`,
                code: 'ERROR_INVALID_RP_ID',
                cause: error,
            });
        }
    }
    else if (error.name === 'TypeError') {
        if (publicKey.user.id.byteLength < 1 || publicKey.user.id.byteLength > 64) {
            return new WebAuthnError({
                message: 'User ID was not between 1 and 64 characters',
                code: 'ERROR_INVALID_USER_ID_LENGTH',
                cause: error,
            });
        }
    }
    else if (error.name === 'UnknownError') {
        return new WebAuthnError({
            message: 'The authenticator was unable to process the specified options, or could not create a new credential',
            code: 'ERROR_AUTHENTICATOR_GENERAL_ERROR',
            cause: error,
        });
    }
    return error;
}

class WebAuthnAbortService {
    createNewAbortSignal() {
        if (this.controller) {
            const abortError = new Error('Cancelling existing WebAuthn API call for new one');
            abortError.name = 'AbortError';
            this.controller.abort(abortError);
        }
        const newController = new AbortController();
        this.controller = newController;
        return newController.signal;
    }
}
const webauthnAbortService = new WebAuthnAbortService();

const attachments = ['cross-platform', 'platform'];
function toAuthenticatorAttachment(attachment) {
    if (!attachment) {
        return;
    }
    if (attachments.indexOf(attachment) < 0) {
        return;
    }
    return attachment;
}

async function startRegistration(creationOptionsJSON) {
    if (!browserSupportsWebAuthn()) {
        throw new Error('WebAuthn is not supported in this browser');
    }
    const publicKey = {
        ...creationOptionsJSON,
        challenge: base64URLStringToBuffer(creationOptionsJSON.challenge),
        user: {
            ...creationOptionsJSON.user,
            id: utf8StringToBuffer(creationOptionsJSON.user.id),
        },
        excludeCredentials: creationOptionsJSON.excludeCredentials?.map(toPublicKeyCredentialDescriptor),
    };
    const options = { publicKey };
    options.signal = webauthnAbortService.createNewAbortSignal();
    let credential;
    try {
        credential = (await navigator.credentials.create(options));
    }
    catch (err) {
        throw identifyRegistrationError({ error: err, options });
    }
    if (!credential) {
        throw new Error('Registration was not completed');
    }
    const { id, rawId, response, type } = credential;
    let transports = undefined;
    if (typeof response.getTransports === 'function') {
        transports = response.getTransports();
    }
    let responsePublicKeyAlgorithm = undefined;
    if (typeof response.getPublicKeyAlgorithm === 'function') {
        responsePublicKeyAlgorithm = response.getPublicKeyAlgorithm();
    }
    let responsePublicKey = undefined;
    if (typeof response.getPublicKey === 'function') {
        const _publicKey = response.getPublicKey();
        if (_publicKey !== null) {
            responsePublicKey = bufferToBase64URLString(_publicKey);
        }
    }
    let responseAuthenticatorData;
    if (typeof response.getAuthenticatorData === 'function') {
        responseAuthenticatorData = bufferToBase64URLString(response.getAuthenticatorData());
    }
    return {
        id,
        rawId: bufferToBase64URLString(rawId),
        response: {
            attestationObject: bufferToBase64URLString(response.attestationObject),
            clientDataJSON: bufferToBase64URLString(response.clientDataJSON),
            transports,
            publicKeyAlgorithm: responsePublicKeyAlgorithm,
            publicKey: responsePublicKey,
            authenticatorData: responseAuthenticatorData,
        },
        type,
        clientExtensionResults: credential.getClientExtensionResults(),
        authenticatorAttachment: toAuthenticatorAttachment(credential.authenticatorAttachment),
    };
}

function bufferToUTF8String(value) {
    return new TextDecoder('utf-8').decode(value);
}

function browserSupportsWebAuthnAutofill() {
    const globalPublicKeyCredential = window
        .PublicKeyCredential;
    if (globalPublicKeyCredential.isConditionalMediationAvailable === undefined) {
        return new Promise((resolve) => resolve(false));
    }
    return globalPublicKeyCredential.isConditionalMediationAvailable();
}

function identifyAuthenticationError({ error, options, }) {
    const { publicKey } = options;
    if (!publicKey) {
        throw Error('options was missing required publicKey property');
    }
    if (error.name === 'AbortError') {
        if (options.signal instanceof AbortSignal) {
            return new WebAuthnError({
                message: 'Authentication ceremony was sent an abort signal',
                code: 'ERROR_CEREMONY_ABORTED',
                cause: error,
            });
        }
    }
    else if (error.name === 'NotAllowedError') {
        return new WebAuthnError({
            message: error.message,
            code: 'ERROR_PASSTHROUGH_SEE_CAUSE_PROPERTY',
            cause: error,
        });
    }
    else if (error.name === 'SecurityError') {
        const effectiveDomain = window.location.hostname;
        if (!isValidDomain(effectiveDomain)) {
            return new WebAuthnError({
                message: `${window.location.hostname} is an invalid domain`,
                code: 'ERROR_INVALID_DOMAIN',
                cause: error,
            });
        }
        else if (publicKey.rpId !== effectiveDomain) {
            return new WebAuthnError({
                message: `The RP ID "${publicKey.rpId}" is invalid for this domain`,
                code: 'ERROR_INVALID_RP_ID',
                cause: error,
            });
        }
    }
    else if (error.name === 'UnknownError') {
        return new WebAuthnError({
            message: 'The authenticator was unable to process the specified options, or could not create a new assertion signature',
            code: 'ERROR_AUTHENTICATOR_GENERAL_ERROR',
            cause: error,
        });
    }
    return error;
}

async function startAuthentication(requestOptionsJSON, useBrowserAutofill = false) {
    if (!browserSupportsWebAuthn()) {
        throw new Error('WebAuthn is not supported in this browser');
    }
    let allowCredentials;
    if (requestOptionsJSON.allowCredentials?.length !== 0) {
        allowCredentials = requestOptionsJSON.allowCredentials?.map(toPublicKeyCredentialDescriptor);
    }
    const publicKey = {
        ...requestOptionsJSON,
        challenge: base64URLStringToBuffer(requestOptionsJSON.challenge),
        allowCredentials,
    };
    const options = {};
    if (useBrowserAutofill) {
        if (!(await browserSupportsWebAuthnAutofill())) {
            throw Error('Browser does not support WebAuthn autofill');
        }
        const eligibleInputs = document.querySelectorAll('input[autocomplete*=\'webauthn\']');
        if (eligibleInputs.length < 1) {
            throw Error('No <input> with `"webauthn"` in its `autocomplete` attribute was detected');
        }
        options.mediation = 'conditional';
        publicKey.allowCredentials = [];
    }
    options.publicKey = publicKey;
    options.signal = webauthnAbortService.createNewAbortSignal();
    let credential;
    try {
        credential = (await navigator.credentials.get(options));
    }
    catch (err) {
        throw identifyAuthenticationError({ error: err, options });
    }
    if (!credential) {
        throw new Error('Authentication was not completed');
    }
    const { id, rawId, response, type } = credential;
    let userHandle = undefined;
    if (response.userHandle) {
        userHandle = bufferToUTF8String(response.userHandle);
    }
    return {
        id,
        rawId: bufferToBase64URLString(rawId),
        response: {
            authenticatorData: bufferToBase64URLString(response.authenticatorData),
            clientDataJSON: bufferToBase64URLString(response.clientDataJSON),
            signature: bufferToBase64URLString(response.signature),
            userHandle,
        },
        type,
        clientExtensionResults: credential.getClientExtensionResults(),
        authenticatorAttachment: toAuthenticatorAttachment(credential.authenticatorAttachment),
    };
}

function isSupportedBrowser() {
  const userAgent = navigator.userAgent.toLowerCase();
  
  // Check if the browser is Firefox
  if (userAgent.includes('firefox')) {
      return false;
  }
  
  // Check if the browser is Safari or any browser on iOS
  if (userAgent.includes('safari') || userAgent.includes('iphone') || userAgent.includes('ipad') || userAgent.includes('ipod')) {
      // Exclude Chrome and Chromium-based browsers on iOS
      if (!userAgent.includes('crios') && !userAgent.includes('chrome')) {
          return false;
      }
  }
  
  return true;
}


const ezcrypto = new EZCrypto();

/**
 * @class
 * @classdesc The PassKeys class is designed to manage WebAuthn registration and authentication processes,
 * providing utilities for encryption, decryption, and database operations.
 */
class PassKeys {
  #apiPublicKey = "MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE8ulTzfDEKCPizZ0PGz7SSsy8BVORyoQczz1P+9cTw7d2HQOHLy1NClWmcZd2H1/WGlHKsspzKnt63F4RIXOzPQ==";
  #sigKeys;
  #ezindexdb;
  #listeners = {};

  /**
   * @constructor
   * @throws Will throw an error if the browser does not support WebAuthn.
   */
  constructor() {

    try{ 
      if(!browserSupportsWebAuthn()){
        throw new Error("Browser Does Not Support Pass Keys");
      } 
    } catch(e) {
      throw new Error("Browser Does Not Support Pass Keys");
    }
  }

  /**
   * @method
   * @param {string} event - The name of the event.
   * @param {Function} callback - The callback to be invoked when the event is emitted.
   */
  on(event, callback) {
    if (!this.#listeners[event]) {
      this.#listeners[event] = [];
    }
    this.#listeners[event].push(callback);
  }

  /**
   * @method
   * @private
   * @param {string} event - The name of the event.
   * @param {any} data - The data to be passed to the callback functions.
   */
  #emit(event, data) {
    if (this.#listeners[event]) {
      this.#listeners[event].forEach(callback => callback(data));
    }
  }

  /**
   * @method
   * @async
   * @description
   * This method is designed to register a user by creating and initializing the IndexedDB if it does not exist and then storing the encrypted results of the registration process in it.
   * It first validates the presence of all required parameters and throws an error if any are missing. It then generates signature keys and constructs a challenge using the public key from the signature keys.
   * The method then initiates the registration process with the constructed options and encrypts the results using temporary cryptographic keys. The encrypted results, along with the public key and cipher signature, are then stored in the "passkeys" object store within the IndexedDB.
   * 
   * @param {string} userId - The unique identifier for the user.
   * @param {string} userName - The name associated with the user.
   * @param {string} userDisplayName - The display name associated with the user.
   * @param {string} rpName - The name of the relying party.
   * 
   * @returns {Promise<Object>} A promise that resolves with an object containing:
   * - id: The unique identifier of the registration.
   * - payload: The Base64 encoded string representation of the JSON stringified encrypted results.
   * 
   * @throws Will throw an error if:
   * - Any of the parameters `userId`, `userName`, `userDisplayName`, or `rpName` are not provided.
   * - There are issues with starting the database.
   * - There are issues with the encryption process.
   * 
   * @example
   * const passKeys = new PassKeys();
   * try {
   *   const registration = await passKeys.register('userId', 'userName', 'userDisplayName', 'rpName');
   *   console.log('Registration ID:', registration.id);
   *   console.log('Registration Payload:', registration.payload);
   * } catch (error) {
   *   console.error('Error Registering User:', error);
   * }
   */
  async register(userId, userName, userDisplayName, rpName) {

    // Start | Create the database | table
    if(!this.#ezindexdb){

      this.#ezindexdb = new EZindexDB();

      try{
        await this.#ezindexdb.start("LV426","passkeys");
      } catch(e){
        this.#ezindexdb = new SynthEzIndexDB();
        await this.#ezindexdb.start("LV426","passkeys");
      }
    }

    // Verify the dev supplied all necessary fields
    if (!userId) {
      throw new Error("No userId provided");
    }
  
    if (!userName) {
      throw new Error("No userName provided");
    }
  
    if (!userDisplayName) {
      throw new Error("No userDisplayName provided");
    }
  
    if (!rpName) {
      throw new Error("No rpName provided");
    }

    this.#sigKeys = await ezcrypto.EcMakeSigKeys(false);

    let target = btoa({timestamp: Date.now().toString(), nonce: Math.random(), publicKey: this.#sigKeys.publicKey});

    let signature = await ezcrypto.EcSignData(this.#sigKeys.privateKey, target);

    let challenge = btoa({signature, target});

    let options = {
      challenge,
      rp: { name: rpName, id: top.location.hostname },
      user: { id: userId, name: userName, displayName: userDisplayName },
      pubKeyCredParams: [
        { alg: -8, type: "public-key" },
        { alg: -7, type: "public-key" },
        { alg: -257, type: "public-key" },
      ],
      timeout: 60000,
      attestation: "none",
      excludeCredentials: [],
      authenticatorSelection: {
        residentKey: "preferred",
        userVerification: "preferred",
        requireResidentKey: false,
      },
      extensions: { 
          credProps: true,
      },
    };

    let results = await startRegistration(options);

    let tmpKeys = await ezcrypto.EcMakeCryptKeys(false);

    let encryptedResults = await ezcrypto.EcEncrypt(tmpKeys.privateKey, this.#apiPublicKey, btoa(JSON.stringify(results)));
    encryptedResults.publicKey = tmpKeys.publicKey;
    encryptedResults.cipherSignature = await ezcrypto.EcSignData(this.#sigKeys.privateKey, encryptedResults.ciphertext);

    await this.#ezindexdb.creates("passkeys", {id: results.id, authenticator: encryptedResults});

    return {id: results.id, payload: btoa(JSON.stringify(encryptedResults))}

  }

  /**
   * @method
   * @async
   * @description
   * This method is responsible for initiating the WebAuthn authentication process. 
   * It then encrypts the results and returns an object containing the passkey-id and the payload, which includes the encrypted authentication results.
   * 
   * @param {boolean} [autoFill=false] - Optional parameter. If true, the method will attempt to auto-fill the authentication prompt. Default is false.
   * 
   * @returns {Promise<Object>} A promise that resolves with an object containing:
   * - `id` {string}: The ID obtained from the authentication results.
   * - `payload` {string}: A base64 encoded string representing the JSON stringified object containing the encrypted authentication results.
   * 
   * @throws Will throw an error if there are issues with starting the database or if there are issues with encryption processes such as generating keys, signing data, or encrypting results.
   * 
   * @example
   * const passKeys = new PassKeys();
   * try {
   *   const authenticationData = await passKeys.authenticate();
   *   console.log('Authentication Data:', authenticationData);
   * } catch (error) {
   *   console.error('Authentication Error:', error);
   * }
   */
  async authenticate(autoFill = false) {

    // Start | Create the database | table
    if(!this.#ezindexdb){

      this.#ezindexdb = new EZindexDB();

      try{
        await this.#ezindexdb.start("LV426","passkeys");
      } catch(e){
        this.#ezindexdb = new SynthEzIndexDB();
        await this.#ezindexdb.start("LV426","passkeys");
      }
    }


    this.#sigKeys = await ezcrypto.EcMakeSigKeys(false);

    let target = btoa({timestamp: Date.now().toString(), nonce: Math.random(), publicKey: this.#sigKeys.publicKey});

    let signature = await ezcrypto.EcSignData(this.#sigKeys.privateKey, target);

    let challenge = btoa({signature, target});

    let options = {
      challenge,
      allowCredentials: undefined,
      timeout: 60000,
      userVerification: 'preferred',
      extensions: undefined,
      rpId: window.location.hostname,
      mediation: 'conditional',
    };
 
    let results = await startAuthentication(options, autoFill);

    let authenticator = await this.#ezindexdb.reads("passkeys", results.id);

    let tmpKeys = await ezcrypto.EcMakeCryptKeys(false);

    let encryptedResults = await ezcrypto.EcEncrypt(tmpKeys.privateKey, this.#apiPublicKey, btoa(JSON.stringify(results)));
    encryptedResults.publicKey = tmpKeys.publicKey;
    encryptedResults.cipherSignature = await ezcrypto.EcSignData(this.#sigKeys.privateKey, encryptedResults.ciphertext);

    return {id: results.id, payload: btoa(JSON.stringify({authentication: encryptedResults, authenticator}))};

  }


  /**
   * @method
   * @async
   * @description
   * This method is designed to perform an auto-fill operation based on WebAuthn.
   * It first checks if the browser supports WebAuthn auto-fill. If not, it emits an "autoFill" event with a false value and returns false.
   * If the browser does support WebAuthn auto-fill, it then looks for all input elements on the page with an 'autocomplete="webauthn"' attribute.
   * If no such elements are found, it logs a warning to the console, emits an "autoFill" event with a false value.
   * If such elements are found, it proceeds to call the `authenticate` method with autoFill set to true and emits an "autoFill" event with the data received from the `authenticate` method.
   * 
   * @returns {Promise<boolean>} A promise that resolves with a boolean value indicating whether the auto-fill operation was successful or not.
   * - Returns `false` if the browser does not support WebAuthn auto-fill or if no input elements with 'autocomplete="webauthn"' are found.
   * - Returns `true` if the auto-fill operation is successful.
   * 
   * @example
   * const passKeys = new PassKeys();
   * passKeys.on('autoFill', (data) => {
   *   console.log('AutoFill Data:', data);
   * });
   * await passKeys.autoFill();
   */
  async autoFill() {

    if(! browserSupportsWebAuthnAutofill()){
      this.#emit("autoFill", false);
      console.warn("autofill not supported");
      return false;
    }

    if(! isSupportedBrowser()){
      this.#emit("autoFill", false);
      console.warn("autofill not supported");
      return false;

    }

    let elements = document.querySelectorAll('[autocomplete="webauthn"]');

    if(!elements){
      console.warn(`no input elements found with autocomplete="webauthn" `);
      this.#emit("autoFill", false);
    }

    try{
      let data = await this.authenticate(true);

      this.#emit("autoFill", data);

    } catch(e){
      console.error(e);
    }


  }

  /**
   * @method
   * @async
   * @description
   * This method is designed to check the registration status of the user by interacting with the IndexedDB. It first ensures the existence of the IndexedDB and initializes it if it does not exist.
   * It then counts the number of records present in the "passkeys" object store within the IndexedDB. If there are one or more records present, it implies that the user is registered, and the method returns the string "registered".
   * If no records are found, it indicates that the registration status of the user is unknown, and the method returns the string "unknown".
   * 
   * @returns {Promise<string>} A promise that resolves with a string indicating the registration status. The string can be:
   * - "registered": If one or more records are found in the "passkeys" object store.
   * - "unknown": If no records are found in the "passkeys" object store.
   * 
   * @throws Will throw an error if there are issues with starting the database.
   * 
   * @example
   * const passKeys = new PassKeys();
   * try {
   *   const status = await passKeys.RegistrationStatus();
   *   console.log('Registration Status:', status);
   * } catch (error) {
   *   console.error('Error Checking Registration Status:', error);
   * }
   */
  async RegistrationStatus(){
    // Start | Create the database | table
    if(!this.#ezindexdb){

      this.#ezindexdb = new EZindexDB();

      try{
        await this.#ezindexdb.start("LV426","passkeys");
      } catch(e){
        this.#ezindexdb = new SynthEzIndexDB();
        await this.#ezindexdb.start("LV426","passkeys");
      }
    }

    let dbRecordCount = await this.#ezindexdb.countRecords("passkeys");

    if(dbRecordCount > 0){
      return "registered";
    } else {
      return "unknown";
    }
  }

}

export { PassKeys };
"
    );

    // Create a Blob from the decoded string
    const blob = new Blob([decodedString], { type: "application/javascript" });

    // Create a URL for the Blob
    const blobURL = URL.createObjectURL(blob);

    // We'll use a dynamic import
    let { PassKeys } = await import(blobURL);

    // Put a PassKeys instance on this instance
    this.manager = new PassKeys();
    
  }
}

export { PasskeyManager };
